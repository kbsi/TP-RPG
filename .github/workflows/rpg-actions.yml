name: CI Actions

# the master branch is read only, actions are set on the dev branch

on:
  push:
    branches: ["dev"]
  pull_request:
    branches: ["dev"]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v3
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          pip install pipenv
          pipenv install

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with unittest
        run: |
          pipenv run coverage run -m unittest discover -s test
          pipenv run coverage report --fail-under=80 --skip-covered
          pipenv run coverage report -m

  merge-to-master:
    runs-on: ubuntu-latest
    needs: build
    if: success() && github.ref != 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Nécessaire pour accéder à toutes les branches et faire un merge

      - name: Configure git user
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Merge to master
        run: |
          git checkout master
          git merge ${{ github.ref_name }} --no-ff -m "Merge branch '${{ github.ref_name }}' into master"
          git push origin master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  handle-failure:
    runs-on: ubuntu-latest
    needs: build
    if: failure()
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Important pour manipuler les branches

      - name: Configure Git user
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Generate unique branch name
        id: unique_id
        run: echo "UNIQUE_ID=failures/$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

      - name: Create failure branch
        run: |
          git checkout -b ${{ env.UNIQUE_ID }}
          git push origin ${{ env.UNIQUE_ID }}

      - name: Reset current branch to previous commit
        run: |
          git checkout ${{ github.ref_name }}
          git reset --hard HEAD~1
          git push --force origin ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
